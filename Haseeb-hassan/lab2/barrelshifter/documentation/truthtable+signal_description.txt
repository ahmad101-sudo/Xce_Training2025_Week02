-----------------------------------------------------------------------------------------------
operation decode (control truth table)
----------------------------------------------------------------------------------------------
| left\_right | shift\_rotate | Operation                           |
| ----------- | ------------- | ----------------------------------- |
| 0           | 0             | Logical **Left Shift** (zero fill)  |
| 0           | 1             | **Left Rotate**                     |
| 1           | 0             | Logical **Right Shift** (zero fill) |
| 1           | 1             | **Right Rotate**                    |
---------------------------------------------------------------------------
Compact truth table (representative rows)

Assume a = A[31:0], N = shift_amt:
| left\_right | shift\_rotate | N  | Output `y`            |
| ----------- | ------------- | -- | --------------------- |
| 0           | 0             | 0  | `A`                   |
| 0           | 0             | 5  | `{A[26:0], 5’b0}`     |
| 0           | 1             | 5  | `{A[26:0], A[31:27]}` |
| 1           | 0             | 5  | `{5’b0, A[31:5]}`     |
| 1           | 1             | 5  | `{A[4:0], A[31:5]}`   |
| 0           | 0             | 16 | `{A[15:0], 16’b0}`    |
| 0           | 1             | 16 | `{A[15:0], A[31:16]}` |
| 1           | 0             | 16 | `{16’b0, A[31:16]}`   |
| 1           | 1             | 16 | `{A[15:0], A[31:16]}` |
---------------------------------------------------------------------------------------------
signal description
----------------------------------------------------------------------------------------------
| Signal           | Width | Direction | Description                                                    |
| ---------------- | ----- | --------- | -------------------------------------------------------------- |
| `a`              | 32    | Input     | Data input word to be shifted/rotated.                         |
| `shift_amt`      | 5     | Input     | Binary shift amount (0–31). Each bit controls one MUX stage.   |
| `left_right`     | 1     | Input     | Shift direction: `0 = left`, `1 = right`.                      |
| `shift_rotate`   | 1     | Input     | Mode: `0 = logical shift (zero fill)`, `1 = rotate`.           |
| `s0, s1, s2, s3` | 32    | Internal  | Intermediate results after each stage (1, 2, 4, 8 bit shifts). |
| `y`              | 32    | Output    | Final shifted/rotated data.                                    |
